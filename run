#!/bin/bash
set -x

# Read environment variables or set default values
LOG_LEVEL=${LOG_LEVEL:-1}
LOG_FILE=${LOG_FILE:-logfile.log}

# Export environment variables so they are accessible to the Python script
export LOG_LEVEL
export LOG_FILE

# Function to log messages using the Python script
log() {
    python3 log_file.py $LOG_LEVEL "$1"
}

# Check for the command passed as an argument
case "$1" in
    "install")
        log "Starting the installation process."
        
        # Install Node.js dependencies
        npm install || { log "npm install failed"; exit 1; }
        npm install --save-dev jest ts-jest @types/jest typescript || { log "npm install for dev dependencies failed"; exit 1; }
        
        log "Dependencies installed successfully."
        exit 0
        ;;
    "test")
        # Run tests and capture the output
        TEST_OUTPUT=$(npm test 2>&1)
        EXIT_CODE=$?

        # Parse the output to get the number of passed tests, total tests, and line coverage
        PASSED_TESTS=$(echo "$TEST_OUTPUT" | grep "Tests:" | sed -n 's/.*\([0-9]\+ passed\).*/\1/p' | awk '{print $1}')
        TOTAL_TESTS=$(echo "$TEST_OUTPUT" | grep "Tests:" | sed -n 's/.*\([0-9]\+ total\).*/\1/p' | awk '{print $1}')
        LINE_COVERAGE=$(echo "$TEST_OUTPUT" | grep "Lines" | sed -n 's/.*: \([0-9]\+\)% .*/\1/p')





        # Print the desired output format
        echo "$PASSED_TESTS/$TOTAL_TESTS test cases passed. $LINE_COVERAGE% line coverage achieved."

        exit $EXIT_CODE
        ;;
    *)
        log "Invalid command. Use 'install' or 'test'."
        exit 1
        ;;
esac
